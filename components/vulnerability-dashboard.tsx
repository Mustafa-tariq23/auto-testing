"use client"

import { useState, useEffect } from "react"
import { Search, AlertTriangle, Shield } from "lucide-react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { VulnerabilityTable } from "@/components/vulnerability-table"
import { VulnerabilityCharts } from "@/components/vulnerability-charts"
import { mockVulnerabilities } from "@/lib/mock-data"
import { Button } from "@/components/ui/button"

export function VulnerabilityDashboard() {
  const [searchQuery, setSearchQuery] = useState("")
  const [severityFilter, setSeverityFilter] = useState("all")
  const [patchStatusFilter, setPatchStatusFilter] = useState("all")
  const [vendorFilter, setVendorFilter] = useState("all")
  const [activeTab, setActiveTab] = useState("vulnerabilities")

  // Get unique vendors for filter dropdown
  const vendors = Array.from(new Set(mockVulnerabilities.map((v) => v.vendor))).sort()

  // Filter vulnerabilities based on search query and filters
  const filteredVulnerabilities = mockVulnerabilities.filter((vuln) => {
    // Search filter - more comprehensive search across all relevant fields
    const matchesSearch =
      searchQuery === "" ||
      vuln.cveId.toLowerCase().includes(searchQuery.toLowerCase()) ||
      vuln.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
      vuln.vendor.toLowerCase().includes(searchQuery.toLowerCase()) ||
      vuln.severity.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (vuln.patchId && vuln.patchId.toLowerCase().includes(searchQuery.toLowerCase())) ||
      vuln.affectedSystems.some((system) => system.toLowerCase().includes(searchQuery.toLowerCase()))

    // Severity filter
    const matchesSeverity = severityFilter === "all" || vuln.severity.toLowerCase() === severityFilter.toLowerCase()

    // Patch status filter
    const matchesPatchStatus =
      patchStatusFilter === "all" ||
      (patchStatusFilter === "patched" && vuln.hasPatch) ||
      (patchStatusFilter === "unpatched" && !vuln.hasPatch)

    // Vendor filter
    const matchesVendor = vendorFilter === "all" || vuln.vendor === vendorFilter

    return matchesSearch && matchesSeverity && matchesPatchStatus && matchesVendor
  })

  // Count vulnerabilities by severity
  const criticalCount = mockVulnerabilities.filter((v) => v.severity === "Critical").length
  const highCount = mockVulnerabilities.filter((v) => v.severity === "High").length
  const mediumCount = mockVulnerabilities.filter((v) => v.severity === "Medium").length
  const lowCount = mockVulnerabilities.filter((v) => v.severity === "Low").length

  // Count patched vs unpatched
  const patchedCount = mockVulnerabilities.filter((v) => v.hasPatch).length
  const unpatchedCount = mockVulnerabilities.filter((v) => !v.hasPatch).length

  // Simulate real-time updates
  useEffect(() => {
    const interval = setInterval(() => {
      // This would typically fetch new data from an API
      // For demo purposes, we're just updating the UI to show it's "live"
      const statusElement = document.getElementById("last-updated")
      if (statusElement) {
        statusElement.textContent = `Last updated: ${new Date().toLocaleTimeString()}`
      }
    }, 30000) // Update every 30 seconds

    return () => clearInterval(interval)
  }, [])

  return (
    <div className="space-y-4">
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Critical Vulnerabilities</CardTitle>
            <AlertTriangle className="h-4 w-4 text-red-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{criticalCount}</div>
            <p className="text-xs text-muted-foreground">
              {patchedCount > 0
                ? `${mockVulnerabilities.filter((v) => v.severity === "Critical" && v.hasPatch).length} patched`
                : "None patched"}
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">High Vulnerabilities</CardTitle>
            <AlertTriangle className="h-4 w-4 text-orange-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{highCount}</div>
            <p className="text-xs text-muted-foreground">
              {mockVulnerabilities.filter((v) => v.severity === "High" && v.hasPatch).length} patched
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Patched Vulnerabilities</CardTitle>
            <Shield className="h-4 w-4 text-green-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{patchedCount}</div>
            <p className="text-xs text-muted-foreground">
              {Math.round((patchedCount / mockVulnerabilities.length) * 100)}% of total
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Unpatched Vulnerabilities</CardTitle>
            <AlertTriangle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{unpatchedCount}</div>
            <p className="text-xs text-muted-foreground">
              {Math.round((unpatchedCount / mockVulnerabilities.length) * 100)}% of total
            </p>
          </CardContent>
        </Card>
      </div>

      <div className="flex flex-col space-y-4 md:flex-row md:space-x-4 md:space-y-0">
        <div className="md:w-2/3">
          <Tabs defaultValue="vulnerabilities" className="space-y-4" onValueChange={setActiveTab}>
            <TabsList>
              <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
              <TabsTrigger value="analytics">Analytics</TabsTrigger>
            </TabsList>
            <TabsContent value="vulnerabilities" className="space-y-4">
              <div className="flex flex-col space-y-2 md:flex-row md:items-center md:space-x-2 md:space-y-0">
                <div className="relative flex-1">
                  <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Search vulnerabilities..."
                    className="pl-8"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                  />
                </div>
                <div className="flex flex-wrap items-center gap-2">
                  <Select value={severityFilter} onValueChange={setSeverityFilter}>
                    <SelectTrigger className="w-[150px]">
                      <SelectValue placeholder="Severity" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Severities</SelectItem>
                      <SelectItem value="critical">Critical</SelectItem>
                      <SelectItem value="high">High</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="low">Low</SelectItem>
                    </SelectContent>
                  </Select>
                  <Select value={patchStatusFilter} onValueChange={setPatchStatusFilter}>
                    <SelectTrigger className="w-[150px]">
                      <SelectValue placeholder="Patch Status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Statuses</SelectItem>
                      <SelectItem value="patched">Patched</SelectItem>
                      <SelectItem value="unpatched">Unpatched</SelectItem>
                    </SelectContent>
                  </Select>
                  <Select value={vendorFilter} onValueChange={setVendorFilter}>
                    <SelectTrigger className="w-[150px]">
                      <SelectValue placeholder="Vendor" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Vendors</SelectItem>
                      {vendors.map((vendor) => (
                        <SelectItem key={vendor} value={vendor}>
                          {vendor}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <VulnerabilityTable vulnerabilities={filteredVulnerabilities} />
              {filteredVulnerabilities.length === 0 && (
                <div className="rounded-md border p-8 text-center">
                  <div className="text-muted-foreground mb-2">No vulnerabilities match your filters</div>
                  <Button
                    variant="outline"
                    onClick={() => {
                      setSearchQuery("")
                      setSeverityFilter("all")
                      setPatchStatusFilter("all")
                      setVendorFilter("all")
                    }}
                  >
                    Reset Filters
                  </Button>
                </div>
              )}
            </TabsContent>
            <TabsContent value="analytics">
              <Card>
                <CardHeader>
                  <CardTitle>Vulnerability Analytics</CardTitle>
                  <CardDescription>
                    Visualize vulnerability trends and distribution across your systems.
                  </CardDescription>
                </CardHeader>
                <CardContent className="pl-2">
                  <VulnerabilityCharts vulnerabilities={mockVulnerabilities} />
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
        <div className="md:w-1/3">
          <Card className="h-full">
            <CardHeader>
              <CardTitle>Vulnerability Benchmark</CardTitle>
              <CardDescription>Compare your vulnerability metrics against industry standards.</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="text-sm font-medium">Critical Vulnerabilities</div>
                    <div className="text-sm text-muted-foreground">{criticalCount} vs Industry Avg: 8</div>
                  </div>
                  <div className="h-2 w-full rounded-full bg-muted">
                    <div
                      className={`h-2 rounded-full ${criticalCount <= 8 ? "bg-green-500" : "bg-red-500"}`}
                      style={{
                        width: `${Math.min(100, (criticalCount / 8) * 100)}%`,
                      }}
                    />
                  </div>
                  <div className="text-xs text-muted-foreground">
                    {criticalCount <= 8 ? "Better than average" : "Worse than average"}
                  </div>
                </div>

                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="text-sm font-medium">Patch Rate</div>
                    <div className="text-sm text-muted-foreground">
                      {Math.round((patchedCount / mockVulnerabilities.length) * 100)}% vs Industry Avg: 65%
                    </div>
                  </div>
                  <div className="h-2 w-full rounded-full bg-muted">
                    <div
                      className={`h-2 rounded-full ${(patchedCount / mockVulnerabilities.length) >= 0.65 ? "bg-green-500" : "bg-red-500"}`}
                      style={{
                        width: `${Math.min(100, ((patchedCount / mockVulnerabilities.length) * 100) / 0.65)}%`,
                      }}
                    />
                  </div>
                  <div className="text-xs text-muted-foreground">
                    {patchedCount / mockVulnerabilities.length >= 0.65 ? "Better than average" : "Worse than average"}
                  </div>
                </div>

                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="text-sm font-medium">Mean Time to Patch</div>
                    <div className="text-sm text-muted-foreground">8.2 days vs Industry Avg: 12 days</div>
                  </div>
                  <div className="h-2 w-full rounded-full bg-muted">
                    <div
                      className="h-2 rounded-full bg-green-500"
                      style={{ width: `${Math.min(100, (12 / 8.2) * 100)}%` }}
                    />
                  </div>
                  <div className="text-xs text-muted-foreground">Better than average</div>
                </div>

                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="text-sm font-medium">Vulnerability Density</div>
                    <div className="text-sm text-muted-foreground">3.4 per 1000 LOC vs Industry Avg: 5.2</div>
                  </div>
                  <div className="h-2 w-full rounded-full bg-muted">
                    <div
                      className="h-2 rounded-full bg-green-500"
                      style={{ width: `${Math.min(100, (5.2 / 3.4) * 100)}%` }}
                    />
                  </div>
                  <div className="text-xs text-muted-foreground">Better than average</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
      <div id="last-updated" className="text-xs text-muted-foreground text-right mb-2">
        Last updated: {new Date().toLocaleTimeString()}
      </div>
    </div>
  )
}
