"use client"

import { useState } from "react"
import {
  DownloadIcon,
  ExternalLinkIcon,
  ChevronDown,
  ChevronUp,
  AlertTriangle,
  Shield,
  AlertCircle,
  Info,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { Badge } from "@/components/ui/badge"
import type { Vulnerability } from "@/lib/types"

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[]
}

export function VulnerabilityTable({ vulnerabilities }: VulnerabilityTableProps) {
  const [sortField, setSortField] = useState<keyof Vulnerability>("severity")
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc")
  const [expandedRows, setExpandedRows] = useState<Record<string, boolean>>({})

  const toggleSort = (field: keyof Vulnerability) => {
    if (sortField === field) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc")
    } else {
      setSortField(field)
      setSortDirection("desc")
    }
  }

  const toggleRowExpand = (id: string) => {
    setExpandedRows((prev) => ({
      ...prev,
      [id]: !prev[id],
    }))
  }

  const sortedVulnerabilities = [...vulnerabilities].sort((a, b) => {
    if (sortField === "severity") {
      const severityOrder = { Critical: 4, High: 3, Medium: 2, Low: 1 }
      const aValue = severityOrder[a[sortField] as keyof typeof severityOrder] || 0
      const bValue = severityOrder[b[sortField] as keyof typeof severityOrder] || 0
      return sortDirection === "asc" ? aValue - bValue : bValue - aValue
    }

    if (sortField === "hasPatch") {
      const aValue = a[sortField] ? 1 : 0
      const bValue = b[sortField] ? 1 : 0
      return sortDirection === "asc" ? aValue - bValue : bValue - aValue
    }

    const aValue = a[sortField]
    const bValue = b[sortField]

    if (typeof aValue === "string" && typeof bValue === "string") {
      return sortDirection === "asc" ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue)
    }

    return 0
  })

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "Critical":
        return <AlertTriangle className="h-4 w-4 text-red-500" />
      case "High":
        return <AlertTriangle className="h-4 w-4 text-orange-500" />
      case "Medium":
        return <AlertCircle className="h-4 w-4 text-yellow-500" />
      case "Low":
        return <Info className="h-4 w-4 text-blue-500" />
      default:
        return null
    }
  }

  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case "Critical":
        return <Badge variant="destructive">{severity}</Badge>
      case "High":
        return <Badge className="bg-orange-500">{severity}</Badge>
      case "Medium":
        return <Badge className="bg-yellow-500 text-black">{severity}</Badge>
      case "Low":
        return <Badge className="bg-blue-500">{severity}</Badge>
      default:
        return <Badge variant="outline">{severity}</Badge>
    }
  }

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="w-[50px]"></TableHead>
            <TableHead className="w-[120px] cursor-pointer" onClick={() => toggleSort("cveId")}>
              <div className="flex items-center">
                CVE ID
                {sortField === "cveId" &&
                  (sortDirection === "asc" ? (
                    <ChevronUp className="ml-1 h-4 w-4" />
                  ) : (
                    <ChevronDown className="ml-1 h-4 w-4" />
                  ))}
              </div>
            </TableHead>
            <TableHead>Description</TableHead>
            <TableHead className="w-[100px] cursor-pointer" onClick={() => toggleSort("severity")}>
              <div className="flex items-center">
                Severity
                {sortField === "severity" &&
                  (sortDirection === "asc" ? (
                    <ChevronUp className="ml-1 h-4 w-4" />
                  ) : (
                    <ChevronDown className="ml-1 h-4 w-4" />
                  ))}
              </div>
            </TableHead>
            <TableHead className="w-[120px] cursor-pointer" onClick={() => toggleSort("vendor")}>
              <div className="flex items-center">
                Vendor
                {sortField === "vendor" &&
                  (sortDirection === "asc" ? (
                    <ChevronUp className="ml-1 h-4 w-4" />
                  ) : (
                    <ChevronDown className="ml-1 h-4 w-4" />
                  ))}
              </div>
            </TableHead>
            <TableHead className="w-[120px] cursor-pointer" onClick={() => toggleSort("hasPatch")}>
              <div className="flex items-center">
                Patch Status
                {sortField === "hasPatch" &&
                  (sortDirection === "asc" ? (
                    <ChevronUp className="ml-1 h-4 w-4" />
                  ) : (
                    <ChevronDown className="ml-1 h-4 w-4" />
                  ))}
              </div>
            </TableHead>
            <TableHead className="w-[100px] text-right">Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {sortedVulnerabilities.length === 0 ? (
            <TableRow>
              <TableCell colSpan={7} className="h-24 text-center">
                No vulnerabilities found.
              </TableCell>
            </TableRow>
          ) : (
            sortedVulnerabilities.map((vuln) => (
              <>
                <TableRow key={vuln.id}>
                  <TableCell>
                    <Button variant="ghost" size="sm" onClick={() => toggleRowExpand(vuln.id)}>
                      {expandedRows[vuln.id] ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
                    </Button>
                  </TableCell>
                  <TableCell className="font-medium">{vuln.cveId}</TableCell>
                  <TableCell className="max-w-[300px] truncate">{vuln.description}</TableCell>
                  <TableCell>
                    <div className="flex items-center space-x-1">
                      {getSeverityIcon(vuln.severity)}
                      <span>{getSeverityBadge(vuln.severity)}</span>
                    </div>
                  </TableCell>
                  <TableCell>{vuln.vendor}</TableCell>
                  <TableCell>
                    {vuln.hasPatch ? (
                      <div className="flex items-center">
                        <Shield className="mr-1 h-4 w-4 text-green-500" />
                        <span className="text-green-500">Patched</span>
                      </div>
                    ) : (
                      <div className="flex items-center">
                        <AlertCircle className="mr-1 h-4 w-4 text-red-500" />
                        <span className="text-red-500">Unpatched</span>
                      </div>
                    )}
                  </TableCell>
                  <TableCell className="text-right">
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button variant="ghost" size="icon" className="h-8 w-8">
                            <ExternalLinkIcon className="h-4 w-4" />
                            <span className="sr-only">View details</span>
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p>View vulnerability details</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                    {vuln.hasPatch && (
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <Button variant="ghost" size="icon" className="h-8 w-8">
                              <DownloadIcon className="h-4 w-4" />
                              <span className="sr-only">Download patch</span>
                            </Button>
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>Download patch</p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    )}
                  </TableCell>
                </TableRow>
                {expandedRows[vuln.id] && (
                  <TableRow className="bg-muted/50">
                    <TableCell colSpan={7} className="p-4">
                      <div className="space-y-4">
                        <div>
                          <h4 className="font-semibold">Description</h4>
                          <p className="mt-1">{vuln.description}</p>
                        </div>
                        {vuln.hasPatch && (
                          <div>
                            <h4 className="font-semibold">Patch Information</h4>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-2">
                              <div>
                                <p className="text-sm text-muted-foreground">Patch ID</p>
                                <p className="font-medium">{vuln.patchId}</p>
                              </div>
                              <div>
                                <p className="text-sm text-muted-foreground">Version</p>
                                <p className="font-medium">{vuln.patchVersion}</p>
                              </div>
                              <div>
                                <p className="text-sm text-muted-foreground">Release Date</p>
                                <p className="font-medium">{vuln.patchReleaseDate}</p>
                              </div>
                              <div>
                                <Button size="sm" className="mt-2">
                                  <DownloadIcon className="mr-2 h-4 w-4" />
                                  Download Patch
                                </Button>
                              </div>
                            </div>
                          </div>
                        )}
                        <div>
                          <h4 className="font-semibold">Affected Systems</h4>
                          <div className="flex flex-wrap gap-2 mt-2">
                            {vuln.affectedSystems.map((system, i) => (
                              <Badge key={i} variant="outline">
                                {system}
                              </Badge>
                            ))}
                          </div>
                        </div>
                        <div>
                          <h4 className="font-semibold">CVSS Score</h4>
                          <div className="mt-2">
                            <div className="w-full bg-muted rounded-full h-2.5">
                              <div
                                className={`h-2.5 rounded-full ${
                                  vuln.severity === "Critical"
                                    ? "bg-red-500"
                                    : vuln.severity === "High"
                                      ? "bg-orange-500"
                                      : vuln.severity === "Medium"
                                        ? "bg-yellow-500"
                                        : "bg-blue-500"
                                }`}
                                style={{
                                  width: `${
                                    vuln.severity === "Critical"
                                      ? "95%"
                                      : vuln.severity === "High"
                                        ? "75%"
                                        : vuln.severity === "Medium"
                                          ? "55%"
                                          : "30%"
                                  }}`,
                                }}
                              ></div>
                            </div>
                            <div className="flex justify-between text-xs mt-1">
                              <span>0</span>
                              <span>10</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </TableCell>
                  </TableRow>
                )}
              </>
            ))
          )}
        </TableBody>
      </Table>
    </div>
  )
}
