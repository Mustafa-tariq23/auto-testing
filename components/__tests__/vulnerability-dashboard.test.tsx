import { render, screen, waitFor } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { VulnerabilityDashboard } from '../vulnerability-dashboard'

// Mock child components
jest.mock('../vulnerability-table', () => ({
  VulnerabilityTable: () => <div data-testid="vulnerability-table">Vulnerability Table</div>
}))

jest.mock('../vulnerability-charts', () => ({
  VulnerabilityCharts: () => <div data-testid="vulnerability-charts">Vulnerability Charts</div>
}))

describe('VulnerabilityDashboard', () => {
  it('renders the critical vulnerabilities card', () => {
    render(<VulnerabilityDashboard />)
    const criticalCard = screen.getByText('Critical Vulnerabilities', { 
      selector: '.tracking-tight.text-sm.font-medium' 
    })
    expect(criticalCard).toBeDefined()
  })

  it('renders the high vulnerabilities card', () => {
    render(<VulnerabilityDashboard />)
    const highCard = screen.getByText('High Vulnerabilities', { 
      selector: '.tracking-tight.text-sm.font-medium' 
    })
    expect(highCard).toBeDefined()
  })

  it('renders the patched vulnerabilities card', () => {
    render(<VulnerabilityDashboard />)
    const patchedCard = screen.getByText('Patched Vulnerabilities', { 
      selector: '.tracking-tight.text-sm.font-medium' 
    })
    expect(patchedCard).toBeDefined()
  })

  it('renders the unpatched vulnerabilities card', () => {
    render(<VulnerabilityDashboard />)
    const unpatchedCard = screen.getByText('Unpatched Vulnerabilities', { 
      selector: '.tracking-tight.text-sm.font-medium' 
    })
    expect(unpatchedCard).toBeDefined()
  })

  it('renders the vulnerability table', () => {
    render(<VulnerabilityDashboard />)
    expect(screen.getByTestId('vulnerability-table')).toBeDefined()
  })

  it('renders the vulnerability charts when analytics tab is clicked', async () => {
    render(<VulnerabilityDashboard />)
    const analyticsTab = screen.getByRole('tab', { name: 'Analytics' })
    await userEvent.click(analyticsTab)
    await waitFor(() => {
      expect(screen.getByTestId('vulnerability-charts')).toBeDefined()
    })
    
    expect(screen.getByTestId('vulnerability-charts')).toBeDefined()
  })

  it('renders the search input', () => {
    render(<VulnerabilityDashboard />)
    expect(screen.getByPlaceholderText('Search vulnerabilities...')).toBeDefined()
  })

  it('renders the severity filter', () => {
    render(<VulnerabilityDashboard />)
    const severitySelect = screen.getByRole('combobox', { 
      name: /all severities/i 
    })
    expect(severitySelect).toBeDefined()
  })

  it('renders the patch status filter', () => {
    render(<VulnerabilityDashboard />)
    const patchStatusSelect = screen.getByRole('combobox', { 
      name: /all statuses/i 
    })
    expect(patchStatusSelect).toBeDefined()
  })

  it('renders the vendor filter', () => {
    render(<VulnerabilityDashboard />)
    const vendorSelect = screen.getByRole('combobox', { 
      name: /all vendors/i 
    })
    expect(vendorSelect).toBeDefined()
  })
})