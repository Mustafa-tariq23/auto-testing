"use client"

import {
  Bar,
  BarChart,
  CartesianGrid,
  Cell,
  Legend,
  Line,
  LineChart,
  Pie,
  PieChart,
  ResponsiveContainer,
  Tooltip,
  XAxis,
  YAxis,
} from "@/components/ui/chart"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import type { Vulnerability } from "@/lib/types"

interface VulnerabilityChartsProps {
  vulnerabilities: Vulnerability[]
}

export function VulnerabilityCharts({ vulnerabilities }: VulnerabilityChartsProps) {
  // Severity distribution data
  const severityData = [
    { name: "Critical", value: vulnerabilities.filter((v) => v.severity === "Critical").length },
    { name: "High", value: vulnerabilities.filter((v) => v.severity === "High").length },
    { name: "Medium", value: vulnerabilities.filter((v) => v.severity === "Medium").length },
    { name: "Low", value: vulnerabilities.filter((v) => v.severity === "Low").length },
  ]

  // Patch status data
  const patchStatusData = [
    { name: "Patched", value: vulnerabilities.filter((v) => v.hasPatch).length },
    { name: "Unpatched", value: vulnerabilities.filter((v) => !v.hasPatch).length },
  ]

  // Vendor distribution data
  const vendorCounts: Record<string, number> = {}
  vulnerabilities.forEach((v) => {
    vendorCounts[v.vendor] = (vendorCounts[v.vendor] || 0) + 1
  })

  const vendorData = Object.entries(vendorCounts)
    .map(([name, value]) => ({ name, value }))
    .sort((a, b) => b.value - a.value)

  // Severity by vendor data
  const severityByVendorData = Object.entries(vendorCounts)
    .map(([vendor, _]) => {
      const critical = vulnerabilities.filter((v) => v.vendor === vendor && v.severity === "Critical").length
      const high = vulnerabilities.filter((v) => v.vendor === vendor && v.severity === "High").length
      const medium = vulnerabilities.filter((v) => v.vendor === vendor && v.severity === "Medium").length
      const low = vulnerabilities.filter((v) => v.vendor === vendor && v.severity === "Low").length

      return {
        vendor,
        critical,
        high,
        medium,
        low,
        total: critical + high + medium + low,
      }
    })
    .sort((a, b) => b.total - a.total)
    .slice(0, 10) // Top 10 vendors

  // Trend data (mock data for demonstration)
  const trendData = [
    { name: "Jan", vulnerabilities: 12, patched: 8, critical: 3, high: 5 },
    { name: "Feb", vulnerabilities: 19, patched: 12, critical: 4, high: 8 },
    { name: "Mar", vulnerabilities: 15, patched: 10, critical: 2, high: 6 },
    { name: "Apr", vulnerabilities: 21, patched: 15, critical: 5, high: 9 },
    { name: "May", vulnerabilities: 25, patched: 18, critical: 6, high: 10 },
    { name: "Jun", vulnerabilities: 18, patched: 14, critical: 4, high: 7 },
  ]

  // Colors for charts
  const SEVERITY_COLORS = ["#ef4444", "#f97316", "#eab308", "#3b82f6"]
  const PATCH_COLORS = ["#22c55e", "#ef4444"]
  const VENDOR_COLORS = ["#3b82f6", "#8b5cf6", "#ec4899", "#f97316", "#84cc16"]

  function getAffectedSystemsData() {
    const systemCounts: Record<string, number> = {}

    vulnerabilities.forEach((vuln) => {
      vuln.affectedSystems.forEach((system) => {
        systemCounts[system] = (systemCounts[system] || 0) + 1
      })
    })

    return Object.entries(systemCounts)
      .map(([name, value]) => ({ name, value }))
      .sort((a, b) => b.value - a.value)
      .slice(0, 10) // Top 10 affected systems
  }

  return (
    <Tabs defaultValue="severity" className="w-full">
      <TabsList className="grid w-full grid-cols-6">
        <TabsTrigger value="severity">Severity</TabsTrigger>
        <TabsTrigger value="patch">Patch Status</TabsTrigger>
        <TabsTrigger value="vendor">Vendor</TabsTrigger>
        <TabsTrigger value="severity-vendor">Severity by Vendor</TabsTrigger>
        <TabsTrigger value="trend">Trends</TabsTrigger>
        <TabsTrigger value="systems">Affected Systems</TabsTrigger>
      </TabsList>

      <TabsContent value="severity" className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={severityData}
                  cx="50%"
                  cy="50%"
                  labelLine={true}
                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {severityData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={SEVERITY_COLORS[index % SEVERITY_COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </div>

          <div className="h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={severityData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="value" name="Count">
                  {severityData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={SEVERITY_COLORS[index % SEVERITY_COLORS.length]} />
                  ))}
                </Bar>
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
      </TabsContent>

      <TabsContent value="patch" className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={patchStatusData}
                  cx="50%"
                  cy="50%"
                  labelLine={true}
                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {patchStatusData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={PATCH_COLORS[index % PATCH_COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </div>

          <div className="h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={patchStatusData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="value" name="Count">
                  {patchStatusData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={PATCH_COLORS[index % PATCH_COLORS.length]} />
                  ))}
                </Bar>
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>

        <div className="h-[300px] mt-4">
          <h3 className="text-lg font-medium mb-2">Patch Status by Severity</h3>
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={[
                {
                  name: "Critical",
                  patched: vulnerabilities.filter((v) => v.severity === "Critical" && v.hasPatch).length,
                  unpatched: vulnerabilities.filter((v) => v.severity === "Critical" && !v.hasPatch).length,
                },
                {
                  name: "High",
                  patched: vulnerabilities.filter((v) => v.severity === "High" && v.hasPatch).length,
                  unpatched: vulnerabilities.filter((v) => v.severity === "High" && !v.hasPatch).length,
                },
                {
                  name: "Medium",
                  patched: vulnerabilities.filter((v) => v.severity === "Medium" && v.hasPatch).length,
                  unpatched: vulnerabilities.filter((v) => v.severity === "Medium" && !v.hasPatch).length,
                },
                {
                  name: "Low",
                  patched: vulnerabilities.filter((v) => v.severity === "Low" && v.hasPatch).length,
                  unpatched: vulnerabilities.filter((v) => v.severity === "Low" && !v.hasPatch).length,
                },
              ]}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="patched" name="Patched" stackId="a" fill="#22c55e" />
              <Bar dataKey="unpatched" name="Unpatched" stackId="a" fill="#ef4444" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </TabsContent>

      <TabsContent value="vendor" className="space-y-4">
        <div className="h-[400px]">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={vendorData} layout="vertical">
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis type="number" />
              <YAxis dataKey="name" type="category" width={100} />
              <Tooltip />
              <Bar dataKey="value" name="Vulnerabilities">
                {vendorData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={VENDOR_COLORS[index % VENDOR_COLORS.length]} />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </div>
      </TabsContent>

      <TabsContent value="severity-vendor" className="space-y-4">
        <div className="h-[400px]">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={severityByVendorData} layout="vertical">
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis type="number" />
              <YAxis dataKey="vendor" type="category" width={100} />
              <Tooltip />
              <Legend />
              <Bar dataKey="critical" name="Critical" stackId="a" fill="#ef4444" />
              <Bar dataKey="high" name="High" stackId="a" fill="#f97316" />
              <Bar dataKey="medium" name="Medium" stackId="a" fill="#eab308" />
              <Bar dataKey="low" name="Low" stackId="a" fill="#3b82f6" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </TabsContent>

      <TabsContent value="trend" className="space-y-4">
        <div className="h-[300px]">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={trendData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Line
                type="monotone"
                dataKey="vulnerabilities"
                stroke="#6366f1"
                name="Total Vulnerabilities"
                strokeWidth={2}
              />
              <Line type="monotone" dataKey="patched" stroke="#22c55e" name="Patched" strokeWidth={2} />
              <Line type="monotone" dataKey="critical" stroke="#ef4444" name="Critical" strokeWidth={2} />
              <Line type="monotone" dataKey="high" stroke="#f97316" name="High" strokeWidth={2} />
            </LineChart>
          </ResponsiveContainer>
        </div>

        <div className="h-[300px] mt-4">
          <h3 className="text-lg font-medium mb-2">Patch Rate Trend</h3>
          <ResponsiveContainer width="100%" height="100%">
            <LineChart
              data={trendData.map((item) => ({
                ...item,
                patchRate: Math.round((item.patched / item.vulnerabilities) * 100),
              }))}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis unit="%" />
              <Tooltip formatter={(value) => [`${value}%`, "Patch Rate"]} />
              <Legend />
              <Line type="monotone" dataKey="patchRate" stroke="#8b5cf6" name="Patch Rate" strokeWidth={2} />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </TabsContent>

      <TabsContent value="systems" className="space-y-4">
        <div className="h-[400px]">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={getAffectedSystemsData()} layout="vertical">
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis type="number" />
              <YAxis dataKey="name" type="category" width={150} />
              <Tooltip />
              <Bar dataKey="value" name="Vulnerabilities" fill="#3b82f6" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </TabsContent>
    </Tabs>
  )
}
